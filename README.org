#+TITLE:     maline
#+AUTHOR:    Marko Dimjašević
#+EMAIL:     marko@cs.utah.edu
#+DATE:      2014-01-02 Thu
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc

#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 
#+XSLT:

* Introduction
*maline* is an Android malware detection framework. If you are an Org-mode
user, you might want to read the [[http://orgmode.org/worg/org-contrib/babel/intro.html][executable version]] of this readme (the
README.org file in the root).

* Installation
*maline* was developed under Ubuntu 12.04.3 LTS. It is very likely it will
work under other POSIX systems too (GNU/Linux and Mac alike). The Android
version we tested *maline* with is Android 4.4.2 (API version 19), which is
assumed throughout the readme.

*maline* is a collection of Bash and Python scripts, so no installation is
needed. It suffices to obtain *maline*, e.g. from Github:

#+BEGIN_SRC sh :exports code
  mkdir ~/projects
  cd ~/projects
  git clone git@github.com:soarlab/maline.git
#+END_SRC

** Dependencies
To use *maline*, you need the following:
- [[https://developer.android.com/sdk/index.html][Android SDK]] - follow instructions for installation of the SDK.
- [[https://code.google.com/p/android-apktool/][apktool]] - *maline* already ships with apktool, which is licensed under the
  Apache License 2.0.
- [[https://www.gnu.org/software/octave/][GNU Octave]] - a programming language for numerical computations. It is
  available through a Ubuntu's default repository.
- [[http://www.csie.ntu.edu.tw/~cjlin/libsvm/][LIBSVM]] - *maline* already ships with LIBSVM, which is licensed under the
  Modified BSD License.
- [[http://www.gnu.org/software/bash/][Bash]] - ships with Ubuntu.
- [[http://www.python.org/][Python]] - we tested *maline* with Python 2.7.3, but it might work with more
  recent versions too. It is available through a Ubuntu's default repository.
- [[http://sourceforge.net/projects/expect/][expect]] - a command line tool that automates interactive applications. It is
  available through a Ubuntu's default repository.

* Configuration

** Path to Executables
*maline* needs to be in the PATH environment variable. In particular, the
=bin/= directory should to be added to the variable, e.g.

#+BEGIN_SRC sh :exports code
  export MALINE=~/projects/maline
  PATH=$PATH:$MALINE/bin
#+END_SRC

** Android Virtual Device
*maline* executes Android apps in the Android Emulator, which comes within the
Android SDK. The Emulator is a QEMU-based emulator that runs Android Virtual
Devices (AVDs). By default, the ARM architecture is emulated, but that is very
slow. Therefore, if one has an =x86= host machine, it is better to create an
=x86= architecture-based virtual device image.  However, Intel has some nasty
long license that you have to accept before installing the Intel x86 System
Image.

First make sure to have the Android API version 19:
#+BEGIN_SRC sh :exports code
  android update sdk --no-ui
#+END_SRC

If you want to use an Intel x86 Atom System Image, then install the image
through the SDK first:

#+BEGIN_SRC sh :exports code
  android update sdk --no-ui --all --filter sysimg-19
#+END_SRC

and then create an AVD device by executing:

#+BEGIN_SRC sh :exports code
  avd-create.sh -a x86 -i maline-android-19
#+END_SRC

Otherwise, if you want to base your AVD device on an ARM architecture, execute:

#+BEGIN_SRC sh :exports code
  avd-create.sh -a armeabi-v7a -i maline-android-19
#+END_SRC

The device creation process usually takes about 5 minutes.

Now you have a clean environment where each app can be executed. That is so
because the above executed =avd-create.sh= command creates an AVD device with
a clean snapshot that will be reloaded every time a new app is analyzed.

You can check that the device is created by executing:

#+BEGIN_SRC sh :exports code
  android list avd
#+END_SRC

You should see a device with a name =maline-android-19=.

* Usage
In order to execute Android apps in *maline*, one first needs to create a list
of the apps. For example, let's assume that there are 6 apps in the =apps/=
sub-directory within the root *maline* directory. Then their list can be
stored to a file =apk-list-file= that has paths to the apps:

#+BEGIN_SRC text
  ~/projects/maline/apps/com.nephoapp.anarxiv_1.apk
  ~/projects/maline/apps/org.ale.scanner.zotero_2.apk
  ~/projects/maline/apps/ed8a51225a3862e30817640ba7ec5b88ee04c98a.apk
  ~/projects/maline/apps/vu.de.urpool.quickdroid_49.apk
  ~/projects/maline/apps/to.networld.android.divedroid_1.apk
  ~/projects/maline/apps/4147f7d801c4bc5241536886309d507c5124fe3b.apk
#+END_SRC

To execute the apps and get their execution logs, run the following:

#+BEGIN_SRC sh :exports code
  maline.sh -c 55432 -b 55184 -s 13234 -f apk-list-file -e -i maline-android-19
#+END_SRC
