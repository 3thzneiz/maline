#+TITLE:     maline
#+AUTHOR:    Marko Dimjašević
#+EMAIL:     marko@cs.utah.edu
#+DATE:      2014-01-02 Thu
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc

#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 
#+XSLT:

* Introduction
*maline* is a free software Android malware detection framework. If you are an
Org-mode user, you might want to read the [[http://orgmode.org/worg/org-contrib/babel/intro.html][executable version]] of this readme
(the README.org file in the root).

* Installation
*maline* was developed under Ubuntu 12.04.3 LTS. It is very likely it will
work under other POSIX systems too (GNU/Linux and Mac alike). The Android
version we tested *maline* with is Android 4.4.2 (API version 19), which is
assumed throughout the readme.

*maline* is a collection of Bash and Python scripts, so no installation is
needed. It suffices to obtain *maline*, e.g. from Github:

#+BEGIN_SRC sh :exports code
  mkdir ~/projects
  cd ~/projects
  git clone git@github.com:soarlab/maline.git
#+END_SRC

** Dependencies
To use *maline*, you need the following:
- [[https://developer.android.com/sdk/index.html][Android SDK]] - follow instructions for installation of the SDK.
- [[https://code.google.com/p/android-apktool/][apktool]] - *maline* already ships with apktool, which is licensed under the
  Apache License 2.0.
- [[https://www.gnu.org/software/octave/][GNU Octave]] - a programming language for numerical computations. It is
  available through a Ubuntu's default repository.
- [[http://www.csie.ntu.edu.tw/~cjlin/libsvm/][LIBSVM]] - *maline* already ships with LIBSVM, which is licensed under the
  Modified BSD License.
- [[http://www.gnu.org/software/bash/][Bash]] - ships with Ubuntu.
- [[http://www.python.org/][Python]] - we tested *maline* with Python 2.7.3, but it might work with more
  recent versions too. It is available through a Ubuntu's default repository.
- [[http://sourceforge.net/projects/expect/][expect]] - a command line tool that automates interactive applications. It is
  available through a Ubuntu's default repository.

*** Downloading the Android Source
The Android source is located in a Git repository hosted by Google.

**** Installing Repo
Repo is a tool to easily download the Android source code from the Git
repository.

To install Repo:

1. Create a bin/ directory in your home directory and include it in
   your path (you can add it in you ~/.bashrc file):

#+BEGIN_SRC sh :exports code
  mkdir ~/bin
  PATH=~/bin:$PATH
#+END_SRC

2. Download the Repo tool and ensure that it is executable:

#+BEGIN_SRC sh :exports code
  curl http://commondatastorage.googleapis.com/git-repo-downloads/repo > ~/bin/repo
  chmod a+x ~/bin/repo
#+END_SRC

**** Initializing a Repo client

1. Create an empty directory to hold your working file:

#+BEGIN_SRC sh :exports code
  mkdir WORKING_DIRECTORY
  cd WORKING_DIRECTORY
#+END_SRC

2. Run /repo init/ to download the latest version of Repo with all its
   most recent bug fixes.

#+BEGIN_SRC sh :exports code
  repo init -u https://android.googlesource.com/platform/manifest
#+END_SRC

3. When prompted, configure Repo with your real name and email
   address. You will need an email address that is connected with a
   registered Google account.

**** Additional Information

To check out a branch other than "master", specify it with -b:

#+BEGIN_SRC sh :exports code
  repo init -u https://android.googlesource.com/platform/manifest -b android-4.4.2_r2
#+END_SRC

The default repo init command will checkout a lot of items that you
may not want. Here's a list of packages that have their own group
name, allowing you to decide if you want them or not.

|---------+--------------------------------------------------------------------------+------------|
| Package | Description                                                              |            |
|---------+--------------------------------------------------------------------------+------------|
| tools   | Packages for dev tools that are not part of the default downloads        | notdefault |
|---------+--------------------------------------------------------------------------+------------|
| device  | Packages to build devices supported by AOSP (for instance Nexus devices) | default    |
|---------+--------------------------------------------------------------------------+------------|
| arm     | Packages to build ARM system images                                      | default    |
|---------+--------------------------------------------------------------------------+------------|
| mips    | Packages to build MIPS system images                                     | default    |
|---------+--------------------------------------------------------------------------+------------|
| x86     | Packages to build x86 system images                                      | default    |
|---------+--------------------------------------------------------------------------+------------|
| linux   | cross-compiler used on Linux host                                        | default    |
|---------+--------------------------------------------------------------------------+------------|
| darwin  | cross-compiler used on MacOS X host                                      | default    |
|---------+--------------------------------------------------------------------------+------------|
| eclipse | Packages used to build Eclipse                                           | notdefault |
|---------+--------------------------------------------------------------------------+------------|
| motodev | Motodev plugins                                                          | notdefault |
|---------+--------------------------------------------------------------------------+------------|

By default, only the default packages are downloaded. You can add
optional (notdefault) packages, and you can also omit default packages
that have their own.  This is done with the -g option. Omitting this
option is the same as doing

#+BEGIN_SRC sh :exports code
  -g all,-notdefault
#+END_SRC

For instance, downloading the tree to work on ARM system image for the
emulator only from a linux workstation you can do: 

#+BEGIN_SRC sh :exports code
  repo init -u ... -g all,-notdefault,-device,-mips,-x86,-darwin
#+END_SRC

A successful initialization will end with a message stating that Repo
is initialized in your working directory. Your client directory should
now contain a .repo directory where files such as the manifest will be
kept.

**** Downloading the Android Source Tree

To pull down the Android source to your working directory from
the repositories as specified in the default manifest, run

#+BEGIN_SRC sh :exports code
  repo sync
#+END_SRC

The Android source files will be located in your working directory
under their project names. The initial sync operation will take an
hour or more to complete. For more about repo sync and other Repo
commands, see the [[http://source.android.com/source/developing.html][Developing]] section.

*** Compiling Android Emulator

**** Initialize

Initialize the environment with the /envsetup.sh/ script.

#+BEGIN_SRC sh :exports code
  . build/envsetup.sh
#+END_SRC

**** Choose a Target
Choose which target to build with lunch.

ARM Architecture and English Language
#+BEGIN_SRC sh :exports code
  lunch aosp_arm-eng
#+END_SRC

x86 Architecture and English Language
#+BEGIN_SRC sh :exports code
  lunch aosp_x86-eng
#+END_SRC

Android Linux and MacOS SDK
#+BEGIN_SRC sh :exports code
  lunch sdk-eng
#+END_SRC

**** Build the Code

Build everything with /make/. GNU make can handle parallel tasks with a
-jN argument, and it's common to use a number of tasks N that's
between 1 and 2 times the number of hardware threads on the computer
being used for the build.

#+BEGIN_SRC sh :exports code
  make -j4
#+END_SRC

**** Build the Linux and MacOS SDK

#+BEGIN_SRC sh :exports code
  make sdk
#+END_SRC

* Configuration

** Path to Executables
*maline* needs an environment variable named =$MALINE=, which should point to
the tool root directory. In addition, it's =bin/= directory should be in the
PATH variable. For example,

#+BEGIN_SRC sh :exports code
  export MALINE=~/projects/maline
  PATH=$PATH:$MALINE/bin
#+END_SRC

** Android Virtual Device
*maline* executes Android apps in the Android Emulator, which comes within the
Android SDK. The Emulator is a QEMU-based emulator that runs Android Virtual
Devices (AVDs). By default, the ARM architecture is emulated, but that is very
slow. Therefore, if one has an =x86= host machine, it is better to create an
=x86= architecture-based virtual device image.  However, Intel has some nasty
long license that you have to accept before installing the Intel x86 System
Image.

First make sure to have the Android API version 19:
#+BEGIN_SRC sh :exports code
  android update sdk --no-ui
#+END_SRC

If you want to use an Intel x86 Atom System Image, then install the image
through the SDK first:

#+BEGIN_SRC sh :exports code
  android update sdk --no-ui --all --filter sysimg-19
#+END_SRC

and then create an AVD device by executing:

#+BEGIN_SRC sh :exports code
  avd-create.sh -a x86 -d maline-android-19
#+END_SRC

Otherwise, if you want to base your AVD device on an ARM architecture, execute:

#+BEGIN_SRC sh :exports code
  avd-create.sh -a armeabi-v7a -d maline-android-19
#+END_SRC

The device creation process usually takes about 5 minutes.

Now you have a clean environment where each app can be executed. That is so
because the above executed =avd-create.sh= command creates an AVD device with
a clean snapshot that will be reloaded every time a new app is analyzed.

You can check that the device is created by executing:

#+BEGIN_SRC sh :exports code
  android list avd
#+END_SRC

You should see a device with a name =maline-android-19=.

* Usage
In order to execute Android apps in *maline*, one first needs to create a list
of the apps. For example, let's assume that there are 6 apps in the =apps/=
sub-directory within the root *maline* directory. Then their list can be
stored to a file =apk-list-file= that has paths to the apps:

#+BEGIN_SRC text
  ~/projects/maline/apps/com.nephoapp.anarxiv_1.apk
  ~/projects/maline/apps/org.ale.scanner.zotero_2.apk
  ~/projects/maline/apps/ed8a51225a3862e30817640ba7ec5b88ee04c98a.apk
  ~/projects/maline/apps/vu.de.urpool.quickdroid_49.apk
  ~/projects/maline/apps/to.networld.android.divedroid_1.apk
  ~/projects/maline/apps/4147f7d801c4bc5241536886309d507c5124fe3b.apk
#+END_SRC

To execute the apps and get their execution logs, run the following:

#+BEGIN_SRC sh :exports code
  maline.sh -f apk-list-file -d maline-android-19
#+END_SRC

Once parsed the logs and obtained the .graph files, to create the data
file with all feature vectors run the following script:

#+BEGIN_SRC sh :exports code
  createFeatureDataFile.sh
#+END_SRC

Now, it is possible to classify the data running the following:

#+BEGIN_SRC sh :exports code
  runClassDroid.sh
#+END_SRC

* Emulab
In the development of *maline*, we have been using [[http://www.emulab.net][Emulab]] extensively. Emulab
is a network testbed developed by [[http://www.flux.utah.edu/][The Flux Research Group]] from the University
of Utah. We are thankful to the group for providing us with such an amazing
computing infrastructure!
* Copyright
*maline* is a free software framework licensed under the terms of the GNU
Affero General Public License, version 3 or (at your option) any later
version. You can find the text of the license in COPYING.

There are software dependencies for *maline*. All of them are free software
too. Read their copyright notices for more information.

To the extent possible under law, Marko Dimjašević has waived all copyright
and related or neighboring rights to this README ([[https://creativecommons.org/publicdomain/zero/1.0/][CC0]]).
